---
import { Image } from 'astro:assets';
import { 
    generateSrcSet, 
    defaultSizes, 
    isSanityImage,
    getImageUrl 
} from '@utils/sanity-image';

interface Props {
    _id?: string;
    src?: string;
    asset?: any;
    width?: number;
    height?: number;
    dimensions?: {
        width: number;
        height: number;
    };
    alt?: string;
    class?: string;
    sizes?: string;
    loading?: 'lazy' | 'eager';
    fetchpriority?: 'high' | 'low' | 'auto';
    imageType?: 'card' | 'hero' | 'logo' | 'avatar' | 'custom';
    'data-sb-field-path'?: string;
}

const { 
    _id, 
    src, 
    asset,
    width, 
    height, 
    dimensions,
    alt, 
    class: className, 
    sizes,
    loading = 'lazy',
    fetchpriority = 'auto',
    imageType = 'custom',
    'data-sb-field-path': fieldPath 
} = Astro.props;

// Determine if this is a Sanity image - prioritize asset over src
const isSanity = asset ? isSanityImage(asset) : false;
const sanitySource = asset; // Always use asset for Sanity images

// For non-Sanity images, ensure we have a valid src
const hasValidSrc = !isSanity && src;

// Get dimensions - use appropriate defaults based on imageType
const getDefaultDimensions = (type: string) => {
    switch(type) {
        case 'logo':
            return { width: 200, height: 80 }; // Reasonable logo dimensions
        case 'avatar':
            return { width: 150, height: 150 };
        default:
            return { width: 800, height: 600 };
    }
};

const defaults = getDefaultDimensions(imageType);
const imgWidth = width || dimensions?.width || defaults.width;
const imgHeight = height || dimensions?.height || defaults.height;

// Prepare annotations for visual editing
const annotations: { [key: string]: string } = {};
if (_id) {
    annotations['data-sb-object-id'] = _id;
} else if (fieldPath) {
    annotations['data-sb-field-path'] = fieldPath;
}

// Generate responsive image props for Sanity images
const responsiveSizes = isSanity ? (sizes || defaultSizes[imageType] || '100vw') : undefined;
const srcSet = isSanity ? generateSrcSet(sanitySource) : undefined;
const defaultSrc = isSanity ? getImageUrl(sanitySource, 800) : undefined;

// Format for non-Sanity images
const format = hasValidSrc && src?.includes('.svg') ? 'svg' : 'webp';

// Only render if we have a valid source
const shouldRender = isSanity ? (sanitySource && defaultSrc) : hasValidSrc;
---

{shouldRender ? (
    !isSanity ? (
        <Image 
            src={src} 
            width={imgWidth} 
            height={imgHeight} 
            alt={alt || ''} 
            format={format} 
            class:list={className}
            loading={loading}
            {...annotations} 
        />
    ) : (
        <img
            src={defaultSrc}
            srcset={srcSet}
            sizes={responsiveSizes}
            width={imgWidth}
            height={imgHeight}
            alt={alt || ''}
            class={className}
            loading={loading}
            fetchpriority={fetchpriority}
            {...annotations}
        />
    )
) : null}