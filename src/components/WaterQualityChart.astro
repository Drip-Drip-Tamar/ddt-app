---
import type { WaterQualitySection } from 'types';
import { getWaterSamples, transformSamplesToChartData, getChartConfig } from '@data/waterQuality';
import { marked } from 'marked';
import Action from '@components/Action.astro';
import Section from '@components/Section.astro';

export interface Props extends WaterQualitySection {
  'data-sb-field-path'?: string;
}

const { 
  heading, 
  body, 
  showChart = true, 
  showTable = false,
  showThresholds = true,
  chartType = 'line',
  cta,
  ...sectionProps 
} = Astro.props;

// Fetch water quality data at build time
const samples = await getWaterSamples();
const chartData = transformSamplesToChartData(samples);
const chartConfig = getChartConfig(showThresholds);

// Sort samples by date for table display
const sortedSamples = [...samples].sort((a, b) => 
  new Date(b.date).getTime() - new Date(a.date).getTime()
);

// Generate unique ID for this chart instance
const chartId = `water-chart-${Math.random().toString(36).substring(2, 11)}`;
---

<Section {...sectionProps}>
  <div class="water-quality-container">
    {heading && (
      <h2 class="text-3xl font-bold mb-4" data-sb-field-path=".heading">
        {heading}
      </h2>
    )}
    
    {body && (
      <div 
        class="prose max-w-none mb-6" 
        data-sb-field-path=".body"
        set:html={marked(body)}
      />
    )}
    
    {showChart && (
      <div class="chart-wrapper mb-8">
        <div class="bg-base-100 rounded-lg shadow-lg p-4 md:p-6">
          <canvas 
            id={chartId}
            class="water-chart"
            style="height: 450px; max-height: 600px;"
          ></canvas>
          
          <noscript>
            <div class="alert alert-warning mt-4">
              <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
              <span>JavaScript is required to view the interactive chart. Please see the data table below.</span>
            </div>
          </noscript>
        </div>
      </div>
    )}
    
    {showTable && (
      <div class="table-section mb-8">
        <button 
          type="button"
          class="btn btn-secondary btn-sm mb-4 table-toggle"
          aria-expanded="false"
          aria-controls={`table-${chartId}`}
        >
          <span class="toggle-text">View data table</span>
          <svg class="chevron-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </button>
        
        <div id={`table-${chartId}`} class="table-container" style="max-height: 0; overflow: hidden;">
          <div class="table-content overflow-x-auto">
            <h3 class="text-xl font-semibold mb-4">Recent Test Results</h3>
            <table class="table table-zebra w-full">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Site</th>
                  <th>E. coli (cfu/100ml)</th>
                  <th>Enterococci (cfu/100ml)</th>
                  {samples.some((s: { rainfall: number | null }) => s.rainfall !== null) && <th>Rainfall (mm)</th>}
                </tr>
              </thead>
              <tbody>
                {sortedSamples.slice(0, 20).map((sample) => (
                  <tr>
                    <td>{new Date(sample.date).toLocaleDateString('en-GB')}</td>
                    <td>{sample.siteName}</td>
                    <td class:list={[
                      sample.ecoli > 1000 ? 'text-error font-semibold' : 
                      sample.ecoli > 500 ? 'text-warning' : 
                      'text-success'
                    ]}>
                      {sample.ecoli ?? '—'}
                    </td>
                    <td class:list={[
                      sample.enterococci > 400 ? 'text-error font-semibold' : 
                      sample.enterococci > 200 ? 'text-warning' : 
                      'text-success'
                    ]}>
                      {sample.enterococci ?? '—'}
                    </td>
                    {samples.some((s: { rainfall: number | null }) => s.rainfall !== null) && (
                      <td>{sample.rainfall ?? '—'}</td>
                    )}
                  </tr>
                ))}
              </tbody>
            </table>
            {sortedSamples.length > 20 && (
              <p class="text-sm text-base-content/70 mt-2">
                Showing most recent 20 results of {sortedSamples.length} total samples
              </p>
            )}
          </div>
        </div>
      </div>
    )}
    
    {cta && cta.length > 0 && (
      <div class="flex flex-wrap gap-4 justify-center mt-8">
        {cta.map((action, idx) => (
          <Action 
            action={action} 
            data-sb-field-path={`.cta.${idx}`}
          />
        ))}
      </div>
    )}
  </div>
</Section>

{/* Table toggle functionality */}
{showTable && (
  <script is:inline define:vars={{ chartId }}>
    document.addEventListener('DOMContentLoaded', () => {
      const toggleBtn = document.querySelector(`.table-toggle[aria-controls="table-${chartId}"]`);
      const tableContainer = document.getElementById(`table-${chartId}`);
      
      if (toggleBtn && tableContainer) {
        toggleBtn.addEventListener('click', () => {
          const isExpanded = toggleBtn.getAttribute('aria-expanded') === 'true';
          const toggleText = toggleBtn.querySelector('.toggle-text');
          const chevron = toggleBtn.querySelector('.chevron-icon');
          
          if (isExpanded) {
            // Collapse
            toggleBtn.setAttribute('aria-expanded', 'false');
            toggleText.textContent = 'View data table';
            tableContainer.style.maxHeight = '0';
            chevron.style.transform = 'rotate(0deg)';
          } else {
            // Expand
            toggleBtn.setAttribute('aria-expanded', 'true');
            toggleText.textContent = 'Hide data table';
            tableContainer.style.maxHeight = tableContainer.scrollHeight + 'px';
            chevron.style.transform = 'rotate(180deg)';
          }
        });
      }
    });
  </script>
)}

{/* Only load Chart.js when the chart is visible */}
{showChart && (
  <script is:inline define:vars={{ chartId, chartData, chartConfig, chartType }}>
    // Intersection Observer to load chart when visible
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(async entry => {
        if (entry.isIntersecting) {
          // Stop observing once loaded
          observer.unobserve(entry.target);
          
          try {
            // Load Chart.js from CDN
            const Chart = await window.loadChart();

            // Apply colors to datasets after normalizing site names
            // Colors grouped by bacteria type (not location)
            const colors = {
              'ecoli': {
                'Calstock': 'rgb(37, 99, 235)',      // darker blue
                'Calstock-bg': 'rgba(37, 99, 235, 0.2)',
                'Okel Tor': 'rgb(96, 165, 250)',     // lighter blue
                'Okel Tor-bg': 'rgba(96, 165, 250, 0.2)'
              },
              'enterococci': {
                'Calstock': 'rgb(124, 58, 237)',     // darker purple
                'Calstock-bg': 'rgba(124, 58, 237, 0.2)',
                'Okel Tor': 'rgb(167, 139, 250)',    // lighter purple
                'Okel Tor-bg': 'rgba(167, 139, 250, 0.2)'
              }
            };

            chartData.datasets.forEach(dataset => {
              // Extract site name and normalize by removing invisible characters
              const rawSite = dataset.label.split(' - ')[0];
              const site = rawSite.replace(/[\u200B-\u200D\uFEFF\u00A0\u202F\u205F\u3000]/g, '').trim();
              const bacteriaType = dataset.label.includes('E. coli') ? 'ecoli' : 'enterococci';

              if (colors[bacteriaType] && colors[bacteriaType][site]) {
                dataset.borderColor = colors[bacteriaType][site];
                dataset.backgroundColor = colors[bacteriaType][site + '-bg'];
              }
            });

            // Create the chart
            const ctx = document.getElementById(chartId);
            if (ctx) {
              new Chart(ctx, {
                type: chartType,
                data: chartData,
                options: chartConfig
              });
            }
          } catch (error) {
            console.error('Failed to load chart libraries:', error);
            // Show error message if available
            const errorElement = document.getElementById('chart-error');
            if (errorElement) {
              errorElement.classList.remove('hidden');
            }
          }
        }
      });
    }, {
      rootMargin: '50px'
    });
    
    // Start observing the chart canvas
    const chartElement = document.getElementById(chartId);
    if (chartElement) {
      observer.observe(chartElement);
    }
  </script>
)}

<style>
  .water-quality-container {
    max-width: 80rem; /* Equivalent to max-w-7xl */
    margin-left: auto;
    margin-right: auto;
    padding-left: 1rem;
    padding-right: 1rem;
    padding-top: 2rem;
    padding-bottom: 2rem;
  }
  
  @media (min-width: 640px) {
    .water-quality-container {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }
  }
  
  @media (min-width: 1024px) {
    .water-quality-container {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }
  
  .chart-wrapper {
    width: 100%;
  }
  
  @media (max-width: 640px) {
    .water-chart {
      max-height: 400px !important;
    }
  }
  
  /* Table toggle styles */
  .table-toggle {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .chevron-icon {
    width: 1.25rem;
    height: 1.25rem;
    transition: transform 0.3s ease;
  }
  
  .table-container {
    transition: max-height 0.3s ease-in-out;
  }
  
  .table-content {
    padding-top: 1rem;
  }
</style>